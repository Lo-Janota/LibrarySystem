import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class ConfigUsers extends JPanel {
    private List<Usuario> usuarios; // Lista de usu√°rios
    private DefaultListModel<String> listModel; // Modelo de lista para o JList

    public ConfigUsers() {
        usuarios = new ArrayList<>(); // Inicializa a lista de usu√°rios
        listModel = new DefaultListModel<>(); // Inicializa o modelo de lista

        setLayout(new BorderLayout()); // Define o layout do painel como BorderLayout

        JPanel buttonsPanel = new JPanel(new FlowLayout(FlowLayout.CENTER)); // Painel para os bot√µes de a√ß√£o
        JButton addButton = new JButton("‚ûï"); // Bot√£o para adicionar usu√°rio
        JButton editButton = new JButton("üñä"); // Bot√£o para editar usu√°rio
        JButton removeButton = new JButton("‚ùå"); // Bot√£o para remover usu√°rio

        buttonsPanel.add(addButton); // Adiciona o bot√£o de adicionar usu√°rio ao painel de bot√µes
        buttonsPanel.add(editButton); // Adiciona o bot√£o de editar usu√°rio ao painel de bot√µes
        buttonsPanel.add(removeButton); // Adiciona o bot√£o de remover usu√°rio ao painel de bot√µes

        // Adiciona tooltips aos bot√µes
        addButton.setToolTipText("Adicionar Usu√°rio");
        editButton.setToolTipText("Editar Usu√°rio");
        removeButton.setToolTipText("Remover Usu√°rio");

        JList<String> userList = new JList<>(listModel); // Lista de usu√°rios
        JScrollPane scrollPane = new JScrollPane(userList); // Cria um JScrollPane para a lista de usu√°rios

        add(buttonsPanel, BorderLayout.NORTH); // Adiciona o painel de bot√µes √† parte superior do painel de configura√ß√£o
        add(scrollPane, BorderLayout.CENTER); // Adiciona o JScrollPane √† parte central do painel de configura√ß√£o

        // Adiciona um ActionListener ao bot√£o de adicionar usu√°rio
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String nome = JOptionPane.showInputDialog("Digite o nome do usu√°rio:");
                if (nome != null && !nome.isEmpty()) {
                    boolean usuarioExistente = false;
                    for (Usuario usuario : usuarios) {
                        if (usuario.getNome().equals(nome)) {
                            usuarioExistente = true;
                            break;
                        }
                    }
                    if (usuarioExistente) {
                        JOptionPane.showMessageDialog(null, "J√° existe um usu√°rio com esse nome.", "Erro", JOptionPane.ERROR_MESSAGE);
                    } else {
                        Usuario usuario = new Usuario(nome);
                        usuarios.add(usuario);
                        listModel.addElement(usuario.getNome());
                        JOptionPane.showMessageDialog(null, "Usu√°rio adicionado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }
        });

        // Adiciona um ActionListener ao bot√£o de editar usu√°rio
        editButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String nomeAntigo = JOptionPane.showInputDialog("Digite o nome do usu√°rio a ser editado:");
                boolean usuarioEncontrado = false;
                for (Usuario usuario : usuarios) {
                    if (usuario.getNome().equals(nomeAntigo)) {
                        String novoNome = JOptionPane.showInputDialog("Digite o novo nome do usu√°rio:");
                        if (novoNome != null && !novoNome.isEmpty()) {
                            usuario.setNome(novoNome);
                            atualizarListaUsuarios();
                            usuarioEncontrado = true;
                            JOptionPane.showMessageDialog(null, "Usu√°rio editado com sucesso.", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                            break;
                        }
                    }
                }
                if (!usuarioEncontrado) {
                    JOptionPane.showMessageDialog(null, "Usu√°rio n√£o encontrado.", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        // Adiciona um ActionListener ao bot√£o de remover usu√°rio
        removeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String nomeUsuario = JOptionPane.showInputDialog("Digite o nome do usu√°rio a ser removido:");
                Usuario usuarioRemover = null;
                for (Usuario usuario : usuarios) {
                    if (usuario.getNome().equals(nomeUsuario)) {
                        usuarioRemover = usuario;
                        break;
                    }
                }
                if (usuarioRemover != null) {
                    usuarios.remove(usuarioRemover);
                    listModel.removeElement(nomeUsuario);
                    JOptionPane.showMessageDialog(null, "Usu√°rio removido com sucesso.", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Usu√°rio n√£o encontrado.", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        // Inicializa a lista de usu√°rios
        atualizarListaUsuarios();
    }

    // Atualiza a lista de usu√°rios no JList
    private void atualizarListaUsuarios() {
        listModel.clear(); // Limpa o modelo de lista
        for (Usuario usuario : usuarios) {
            listModel.addElement(usuario.getNome()); // Adiciona cada usu√°rio ao modelo de lista
        }
    }

    // Classe interna para representar um usu√°rio
    private class Usuario {
        private String nome;

        public Usuario(String nome) {
            this.nome = nome;
        }

        public String getNome() {
            return nome;
        }

        public void setNome(String nome) {
            this.nome = nome;
        }
    }

    // M√©todo principal para executar a aplica√ß√£o Swing
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Configura√ß√£o de Usu√°rios");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(400, 300);
            frame.setLocationRelativeTo(null);

            ConfigUsers configUsers = new ConfigUsers();
            frame.add(configUsers);

            frame.setVisible(true);
        });
    }
}

